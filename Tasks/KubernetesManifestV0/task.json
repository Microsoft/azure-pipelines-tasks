{
    "id": "DEE316A2-586F-4DEF-BE79-488A1F503DFE",
    "name": "KubernetesManifest",
    "friendlyName": "Kubernetes manifests",
    "description": "Manifest based deployments to Kubernetes",
    "helpUrl": "https://go.microsoft.com/fwlink/?linkid=851275",
    "helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?linkid=851275)",
    "category": "Deploy",
    "preview": true,
    "visibility": [
        "Build",
        "Release"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 0,
        "Minor": 151,
        "Patch": 0
    },
    "demands": [],
    "groups": [
        {
            "name": "config",
            "displayName": "Config",
            "isExpanded": true
        },
        {
            "name": "kubernetesCluster",
            "displayName": "Kubernetes Cluster",
            "isExpanded": true,
            "visibleRule": "action != bake"
        }
    ],
    "inputs": [
        {
            "name": "kubernetesServiceConnection",
            "type": "connectedService:kubernetes",
            "label": "Kubernetes service connection",
            "helpMarkDown": "Select a Kubernetes service connection.",
            "groupName": "kubernetesCluster",
            "required": true
        },
        {
            "name": "namespace",
            "type": "string",
            "label": "Namespace",
            "required": true,
            "defaultValue": "default",
            "groupName": "kubernetesCluster",
            "helpMarkDown": "Sets the namespace for the commands by using the â€“namespace flag. If the namespace is not provided, the commands will run in the default namespace."
        },
        {
            "name": "action",
            "type": "pickList",
            "label": "Action",
            "required": false,
            "defaultValue": "deploy",
            "groupName": "config",
            "options": {
                "bake": "bake",
                "create secret": "create secret",
                "delete": "delete",
                "deploy": "deploy",
                "patch": "patch",
                "promote": "promote",
                "scale": "scale",
                "reject": "reject"
            },
            "helpMarkDown": "Choose the action to be performed."
        },
        {
            "name": "strategy",
            "type": "pickList",
            "label": "Strategy",
            "required": false,
            "groupName": "config",
            "defaultValue": "none",
            "options": {
                "canary": "Canary",
                "none": "None"
            },
            "helpMarkDown": "Deployment strategy to be used",
            "visibleRule": "action = deploy || action = promote || action = reject"
        },
        {
            "name": "percentage",
            "type": "string",
            "label": "Percentage",
            "required": true,
            "groupName": "config",
            "helpMarkDown": "",
            "defaultValue": 0,
            "visibleRule": "strategy = Canary && action = deploy",
            "validation": {
                "expression": "isMatch(value, '(^(([0-9]|[1-9][0-9]|100)(\\.\\d{1,2})?)$)','Multiline')",
                "message": "Enter valid percentage value i.e between 0 to 100."
            }
        },
        {
            "name": "manifests",
            "type": "filePath",
            "label": "Manifests",
            "required": true,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Manifests to deploy",
            "visibleRule": "action = deploy || action = promote || action = reject"
        },
        {
            "name": "containers",
            "type": "multiLine",
            "label": "Containers",
            "required": false,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Containers",
            "visibleRule": "action = deploy || action = promote"
        },
        {
            "name": "imagePullSecrets",
            "type": "multiLine",
            "label": "ImagePullSecrets",
            "required": false,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "ImagePullSecret to pull image from private registry",
            "visibleRule": "action = deploy || action = promote"
        },
        {
            "name": "renderType",
            "type": "pickList",
            "label": "Render Engine",
            "required": false,
            "defaultValue": "helm2",
            "groupName": "config",
            "visibleRule": "action = bake",
            "options": {
                "helm2": "Helm 2"
            },
            "helpMarkDown": "Tool to generate manifest"
        },
        {
            "name": "helmChart",
            "type": "filePath",
            "label": "Helm Chart",
            "required": true,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Helm chart path to bake",
            "visibleRule": "action = bake && renderType = helm2"
        },
        {
            "name": "overrideFiles",
            "type": "multiLine",
            "label": "Override Files",
            "required": false,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Override files to set",
            "visibleRule": "action = bake && renderType = helm2"
        },
        {
            "name": "overrides",
            "type": "multiLine",
            "label": "Overrides",
            "required": false,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Override values to set",
            "visibleRule": "action = bake && renderType = helm2"
        },
        {
            "name": "resourceToPatch",
            "type": "radio",
            "label": "Resource to patch",
            "required": true,
            "defaultValue": "file",
            "options": {
                "file": "file",
                "name": "name"
            },
            "groupName": "config",
            "helpMarkDown": "to identify the resource",
            "visibleRule": "action = patch"
        },
        {
            "name": "resourceFileToPatch",
            "type": "filePath",
            "label": "File path",
            "required": true,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Path to the file used for patch",
            "visibleRule": "action = patch && resourceToPatch = file"
        },
        {
            "name": "kind",
            "type": "string",
            "label": "Kind",
            "required": true,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Kind of K8s object; deployment, replicaSet etc.",
            "visibleRule": "action = scale || resourceToPatch = name"
        },
        {
            "name": "name",
            "type": "string",
            "label": "Name",
            "required": true,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Name of the k8s object",
            "visibleRule": "action = scale || resourceToPatch = name"
        },
        {
            "name": "replicas",
            "type": "string",
            "label": "Replica count",
            "required": true,
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Number of replicas to scale to",
            "visibleRule": "action = scale"
        },
        {
            "name": "mergeStrategy",
            "type": "pickList",
            "label": "Merge Strategy",
            "required": true,
            "defaultValue": "strategic",
            "options": {
                "json": "json",
                "merge": "merge",
                "strategic": "strategic"
            },
            "groupName": "config",
            "helpMarkDown": "The type of patch being provided; one of [json merge strategic]",
            "visibleRule": "action = patch"
        },
        {
            "name": "arguments",
            "type": "string",
            "label": "Arguments",
            "defaultValue": "",
            "groupName": "config",
            "helpMarkDown": "Arguments for `kubectl delete` command",
            "visibleRule": "action = delete || action = reject"
        },
        {
            "name": "patch",
            "type": "string",
            "label": "Patch",
            "required": true,
            "groupName": "config",
            "helpMarkDown": "Contents of patch",
            "visibleRule": "action = patch"
        },
        {
            "name": "secretType",
            "type": "pickList",
            "label": "Type of secret",
            "defaultValue": "dockerRegistry",
            "required": true,
            "visibleRule": "action = create secret",
            "groupName": "config",
            "options": {
                "dockerRegistry": "dockerRegistry",
                "generic": "generic"
            },
            "helpMarkDown": "Create/update a generic or docker imagepullsecret. Select dockerRegistry to create/update the imagepullsecret of the selected registry. An imagePullSecret is a way to pass a secret that contains a container registry password to the Kubelet so it can pull a private image on behalf of your Pod."
        },
        {
            "name": "secretName",
            "type": "string",
            "label": "Secret name",
            "required": false,
            "groupName": "config",
            "visibleRule": "action = create secret",
            "defaultValue": "",
            "helpMarkDown": "Name of the secret. You can use this secret name in the Kubernetes YAML configuration file."
        },
        {
            "name": "secretArguments",
            "type": "multiLine",
            "groupName": "config",
            "properties": {
                "resizable": "true",
                "rows": "2",
                "editorExtension": "ms.vss-services-azure.kubernetes-parameters-grid"
            },
            "label": "Arguments",
            "defaultValue": "",
            "helpMarkDown": "Specify keys and literal values to insert in secret.For example, --from-literal=key1=value1 --from-literal=key2=\"top secret\".",
            "visibleRule": "action = create secret && secretType = generic"
        },
        {
            "name": "dockerRegistryEndpoint",
            "type": "connectedService:dockerregistry",
            "groupName": "config",
            "label": "Docker registry service connection",
            "helpMarkDown": "Select a Docker registry service connection. Required for commands that need to authenticate with a registry.",
            "visibleRule": "action = create secret && secretType = dockerRegistry"
        }
    ],
    "dataSourceBindings": [],
    "instanceNameFormat": "$(action)",
    "outputVariables": [
        {
            "name": "manifestsBundle",
            "description": "The location of the manifest bundles created by bake action"
        }
    ],
    "execution": {
        "Node": {
            "target": "src//run.js"
        }
    },
    "messages": {
        "DownloadPathForStableTxt": "Download path for stable.txt: %s",
        "DownloadKubeCtlFailed": "Can not download the kubectl client of version %s. Check if the version is correct https://github.com/kubernetes/kubernetes/releases",
        "DownloadStableVersionFailed": "Can not download kubernetes stable version file from %s. Falling back to %s",
        "UsingLatestStableVersion": "Invalid version 1.7 specified in Version Spec input. Using latest stable version instead. Check for correct versions https://github.com/kubernetes/kubernetes/releases",
        "NotAValidSemverVersion": "Version not specified in correct format. E.g: 1.8.2, v1.8.2, 2.8.2, v2.8.2.",
        "ManifestFileNotFound": "No manifest file(s) matching %s was found.",
        "KubernetesServiceConnectionNotFound": "Kubernetes service connection details not found.",
        "UnknownRenderType": "Unknown render engine",
        "ResourceKindNotDefined": "Resource kind is null",
        "NullInputObject": "Input object is null.",
        "ArgumentsInputNotSupplied": "Arguments are not supplied.",
        "NullInputObjectMetadata": "Input object metadata is null.",
        "CanaryDeploymentAlreadyExistErrorMessage": "Canary deployment already exists. Rejecting this deployment.",
        "InvalidRejectActionDeploymentStrategy": "Reject action works only with strategy: canary",
        "InvalidPromotetActionDeploymentStrategy": "Promote action works only with strategy: canary"
    }
}