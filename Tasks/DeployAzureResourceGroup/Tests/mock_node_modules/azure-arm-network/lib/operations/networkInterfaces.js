'use strict';
var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');
var WebResource = msRest.WebResource;
function NetworkInterfaces(client) {
    this.client = client;
}
NetworkInterfaces.prototype.list = (resourceGroupName, options, callback) => {
    console.log("networkInterfaces.list is called");
    var client = this.client;
    if (!callback && typeof options === 'function') {
        callback = options;
        options = null;
    }
    if (!callback) {
        throw new Error('callback cannot be null.');
    }
    var apiVersion = '2016-03-30';
    // Validate
    
    var result = [];
    if (resourceGroupName.includes("OneVM")) {
        var NetworkInterface = { "id": "1", "ipConfigurations": [{"id": "1" , "publicIPAddress":{ "id": "1" }}] };
        result.push(NetworkInterface);
    }
    else if (resourceGroupName.includes("TwoVMs")) {
        var NetworkInterface1 = { "id": "1", "ipConfigurations": [{"id": "1" , "publicIPAddress":{ "id": "1" }}]};
        var NetworkInterface2 = { "id": "2", "ipConfigurations": [{"id": "2" , "publicIPAddress":{ "id": "2" }}]};
        result.push(NetworkInterface1);
        result.push(NetworkInterface2);
    }
    else {
        var NetworkInterface = { "id": "nID", "ipConfigurations": [{"id": "pID" , "publicIPAddress": {"id": "pID" } }] };
        result.push(NetworkInterface);
    }
    console.log("result:");
    console.log(util.inspect(result, {depth: null}));
    return callback(null, result);
};
NetworkInterfaces.prototype.createOrUpdate = (resourceGroupName, networkInterfaceName, parameters, options, callback) => {
    console.log("networkInterfaces.createOrUpdate is called");
    var client = this.client;
    if(!callback && typeof options === 'function') {
        callback = options;
        options = null;
    }
    if (!callback) {
        throw new Error('callback cannot be null.');
    }
    return callback(null, "Successfully Updated NIC");
};
module.exports = NetworkInterfaces;
