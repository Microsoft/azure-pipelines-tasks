/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
'use strict';
var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');
var WebResource = msRest.WebResource;
function LoadBalancers(client) {
    this.client = client;
}
LoadBalancers.prototype.list = (resourceGroupName, options, callback) => {
    console.log("loadBalancers.list is called");
    var client = this.client;
    if (!callback && typeof options === 'function') {
        callback = options;
        options = null;
    }
    if (!callback) {
        throw new Error('callback cannot be null.');
    }
    var apiVersion = '2016-03-30';
    var result = [];
    if (resourceGroupName.includes("OneLBOneVM")) {
        var lb = { "name": "LB", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }] }], "frontendIPConfigurations": [{ "id": "1" }], "inboundNatRules": [] };
        if (resourceGroupName.includes("InboundNatRulesPresent")) {
            lb = { "name": "LB", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }] }], "frontendIPConfigurations": [{ "id": "1" }], "inboundNatRules": [{ "frontendPort": 5986, "backendPort": 5986 }] };
            if(resourceGroupName.includes("VMAttached")){
                lb = { "name": "LB", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }] }], "frontendIPConfigurations": [{ "id": "1" }], "inboundNatRules": [{ "frontendPort": 5986, "backendPort": 5986, "backendIPConfiguration": {"id": "1"} }] };
            }
        }
        result.push(lb);
    }
    else if (resourceGroupName.includes("OneLBTwoVMs")) {
        var lb = { "name": "LB", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }, { "id": "2" }] }], "frontendIPConfigurations": [{ "id": "1" }], "inboundNatRules": [] };
        if (resourceGroupName.includes("InboundNatRulesPresent")) {
            lb = { "name": "LB", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }, { "id": "2" }] }], "frontendIPConfigurations": [{ "id": "1" }], "inboundNatRules": [{ "frontendPort": 5986, "backendPort": 5986 }, { "frontendPort": 5987, "backendPort": 5986 }] };
            if(resourceGroupName.includes("VMsAttached")){
                lb = { "name": "LB", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }, { "id": "2" }] }], "frontendIPConfigurations": [{ "id": "1" }], "inboundNatRules": [{ "frontendPort": 5986, "backendPort": 5986, "backendIPConfiguration": {"id": "1"} }, { "frontendPort": 5987, "backendPort": 5986, "backendIPConfiguration": {"id": "2"} }] };
            }
        }
        result.push(lb);
    }
    console.log("Returning result from LB:");
    console.log(result);
    return callback(null, result);
};
LoadBalancers.prototype.get = (resourceGroupName, lbName, options, callback) => {
    console.log("loadBalancers.get is called");
    var client = this.client;
    if (!callback && typeof options === 'function') {
        callback = options;
        options = null;
    }
    if (!callback) {
        throw new Error('callback cannot be null.');
    }
    var result = [];
    if (resourceGroupName.includes("OneLBOneVM")) {
        var lb = { "inboundNatRules": [{ "backendPort": 5986, "backendIPConfiguration": { "id": "1" }, "frontendPort": 5986 }], "frontendIPConfigurations": "127.0.0.1", "location": "location", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }] }] };
        result.push(lb);
    }
    else if (resourceGroupName.includes("OneLBTwoVMs")) {
        var lb = { "inboundNatRules": [{ "backendPort": 5986, "backendIPConfiguration": { "id": "1" }, "frontendPort": 5986 }, { "backendPort": 5986, "backendIPConfiguration": { "id": "2" }, "frontendPort": 5987 }], "frontendIPConfigurations": "127.0.0.1", "location": "location", "backendAddressPools": [{ "backendIPConfigurations": [{ "id": "1" }, { "id": "2" }] }] };
        result.push(lb);
    }
    else if (resourceGroupName.includes("NoLB")) {
        return callback("Details cannot be fetched", null);
    }
    return callback(null, result);
};
LoadBalancers.prototype.createOrUpdate = (resourceGroupName, lbName, parameters, options, callback) => {
    console.log("loadBalancers.createOrUpdate is called");
    console.log("Parameters: %s", util.inspect(parameters["inboundNatRules"], {depth: null}));
    var client = this.client;
    if (!callback && typeof options === 'function') {
        callback = options;
        options = null;
    }
    if (!callback) {
        throw new Error('callback cannot be null.');
    }
    var inboundNatRules = [];
    var count = 1;
    for (var rule of parameters["inboundNatRules"]) {
        console.log("Added inbound Nat Rule: %s", util.inspect(rule, {depth: null}));
        var ruleAdded = { "frontendPort": rule["frontendPort"], "id": count };
        inboundNatRules.push(ruleAdded);
        count++;
    }
    var result = { "inboundNatRules": inboundNatRules };
    return callback(null, result);
};
module.exports = LoadBalancers;
