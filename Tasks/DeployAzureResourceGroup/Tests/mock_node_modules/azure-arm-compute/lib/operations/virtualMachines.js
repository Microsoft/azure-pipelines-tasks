'use strict';

var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');
var WebResource = msRest.WebResource;

function VirtualMachines(client) {
  this.client = client;
}

VirtualMachines.prototype.list = function (resourceGroupName, options, callback) {
  console.log("virtualMachines.list is called");
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  var apiVersion = '2016-03-30';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  var vm = {
    name: "customVM",
    networkProfile: {
      networkInterfaces: [
        {
          id: "nID"
        }
      ]
    }
  }

  return callback(null, [vm]);
};

VirtualMachines.prototype.start = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.start is called");
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

VirtualMachines.prototype.restart = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.restart is called");
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

VirtualMachines.prototype.powerOff = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.powerOff is called");
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
    
  }
  return callback(null);
}

VirtualMachines.prototype.deleteMethod = function (resourceGroupName, vmName, options, callback) {
  console.log("virtualMachines.deleteMethod is called");
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  return callback(null);
}

module.exports = VirtualMachines;
