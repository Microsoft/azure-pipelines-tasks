{
  "loc.friendlyName": ".NET Core SDK Installer",
  "loc.helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?linkid=853651)",
  "loc.description": "Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks.",
  "loc.instanceNameFormat": "Use .NET Core $(packageType)",
  "loc.group.displayName.generalAdvanced": "Advanced",
  "loc.input.label.packageType": "Package to install",
  "loc.input.help.packageType": "Please select whether to install only runtime or full SDK.",
  "loc.input.label.useGlobalJson": "use global.json",
  "loc.input.help.useGlobalJson": "If you set this box, the task will search for all global.json from your working directory and install the matching SDK.",
  "loc.input.label.version": "Version",
  "loc.input.help.version": "Specify exact version of .NET Core SDK or runtime to install.<br/>Find the value of `version-sdk` for installing SDK, or `version-runtime` for installing Runtime from any releases [here](https://github.com/dotnet/core/blob/master/release-notes/releases.json)",
  "loc.input.label.workingDirectory": "Working Directory",
  "loc.input.help.workingDirectory": "Current working directory where the script starts searching for files named 'global.json'.  Empty is the root of the repo (build) or artifacts (release), which is $(System.DefaultWorkingDirectory)",
  "loc.messages.ToolFailed": "Tool install failed: %s",
  "loc.messages.ImplicitVersionNotSupported": "Version should be a valid and explicit version: %s",
  "loc.messages.getMachinePlatformFailed": "Failed to get machine platform details. Error: %s.",
  "loc.messages.getDownloadUrlsFailed": "Failed to get download urls. Error: %s.",
  "loc.messages.UsingCachedTool": "Cached copy of .NET Core exists. No need to install afresh. Cached tool location: %s.",
  "loc.messages.CheckingToolCache": "Checking if a cached copy exists for this version...",
  "loc.messages.InstallingAfresh": "The cache does not contain the requested version of .NET Core. Downloading and installing it now.",
  "loc.messages.GettingDownloadUrl": "Getting URL to download .NET Core %s version: %s.",
  "loc.messages.CouldNotDetectPlatform": "Could not detect the machine's OS",
  "loc.messages.NullDownloadUrls": "Could not construct download URL. Please ensure that specified version %s is valid.",
  "loc.messages.DownloadingUrl": "Downloading .NET Core package from URL: %s",
  "loc.messages.ExtractingPackage": "Extracting downloaded package %s.",
  "loc.messages.CachingTool": "Caching this installed tool.",
  "loc.messages.SuccessfullyInstalled": "Successfully installed .NET Core %s version %s.",
  "loc.messages.ToolToInstall": "Tool to install: .NET Core %s version %s.",
  "loc.messages.PrimaryPlatform": "Detected platform (Primary): %s",
  "loc.messages.LegacyPlatform": "Detected platform (Legacy): %s",
  "loc.messages.WarningVersionNotFound": "Could not fetch download information for version %s. Please check if the version specified is correct. You can refer the link for supported versions => https://github.com/dotnet/core/blob/master/release-notes/releases.json. Falling back to creating convention based URL.",
  "loc.messages.CouldNotDownload": "Could not download installation package from this URL: %s Error: %s",
  "loc.messages.FailedToDownloadPackage": "Failed to download package for installation",
  "loc.messages.PrependGlobalToolPath": "Creating global tool path and pre-pending to PATH.",
  "loc.messages.VersionMissingException": "If you don't use global.json then please defined a version.",
  "loc.messages.FailedToFindGlobalJson": "From the root of your working folder we can't find any global.json file.",
  "loc.messages.GlobalJsonFound": "Found global.json here: %s",
  "loc.messages.FailedToReadGlobalJson": "The global.json file isn't valid. (%s) Please take a look in the documentation for global.json (https://docs.microsoft.com/en-us/dotnet/core/tools/global-json)",
  "loc.messages.UseGlobalJson": "Installer will install sdk's from all global.json files.",
  "loc.messages.UseVersion": "Installer will install the sdk %s.",
  "loc.messages.AddGlobalJsonViaToCache": "Add via global.json to cache",
  "loc.messages.CopySdkFromTo": "Copy SDK from %s to %s",
  "loc.messages.DeleteSdkFolderOfAnBrokenInstallation": "Delete the folder %s of an broken installation.",
  "loc.messages.RemoveSdkFile": "Remove the file %s.",
  "loc.messages.InsertNewSdkFile": "Create the file %s"
}